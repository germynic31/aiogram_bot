from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from random import randrange
import random
import requests
from bs4 import BeautifulSoup as bs
from gtts import gTTS

from keyboards import kb, ikb, kb_photo, ikb2
from config import TOKEN_API


bot = Bot(TOKEN_API)
dp = Dispatcher(bot)


async def on_startup(_):
    """–î–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print("–±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω")


# –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Help
HELP_COMMAND = '''
<b>/start</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É</em>
<b>/links</b> - <em>—Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏</em>
<b>–ê–Ω–µ–∫–¥–æ—Ç—ã</b> - <em>–ª—é—Ç—ã–µ –∏ —Å–≤–µ–∂–∏–µ –∞–Ω–µ–∫–¥–æ—Ç—ã (—Ç–µ—Å—Ç)</em>

<b>–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∑—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</b>
'''

# –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ send_random_photo2
citrus_photo = ["https://images.albertsons-media.com/is/image/ABS/184080250?$ng-ecom-pdp-desktop$&defaultImage"
                "=Not_Available",
                "https://target.scene7.com/is/image/Target/GUEST_3e3023d6-31c9-4a50-8d1e-a5a5719448ae",
                "https://target.scene7.com/is/image/Target/GUEST_c9cc2d3f-d31a-4e81-a99c-f7521195cd86?wid=488&hei=488"
                "&fmt=pjpeg"]
photos = dict(zip(citrus_photo, ['–õ–∏–º–æ–Ω', '–õ–∞–π–º', '–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç']))
random_photo = random.choice(list(photos.keys()))


async def send_random(message: types.Message):
    """–î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ send_random_photo2."""
    await bot.send_photo(chat_id=message.chat.id,
                         photo=random_photo,
                         caption=photos[random_photo],
                         reply_markup=ikb2)


async def get_jokes(message: types.Message):
    """–î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ send_new_jokes."""
    await bot.send_message(chat_id=message.chat.id, text='–í–æ—Ç —Ç–µ–±–µ –∞–Ω–µ–∫–¥–æ—Ç—ã —Å —Å–∞–π—Ç–∞ anekdot.ru/last/anekdot')
    url = 'https://www.anekdot.ru/last/anekdot/'
    r = requests.get(url=url)

    soup = bs(r.text, 'html.parser')

    joke = soup.find_all('div', class_="text")

    i = 0
    if i < len(joke):
        for article in joke:
            i += 1
            article_title = article.text.strip() + '\n\n'
            await bot.send_message(chat_id=message.chat.id, text=article_title)


@dp.message_handler(commands='start')
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ start."""
    await bot.send_sticker(message.chat.id,
                           sticker="CAACAgIAAxkBAAEJ0GtkwCJ3ULrn40xGxy8vOz8Yk_nLogACBQADwDZPE_lqX5qCa011LwQ")
    await message.answer(text='<em>–ü—Ä–∏–≤–µ—Ç!</em>', parse_mode="HTML", reply_markup=kb)
    await message.delete()


@dp.message_handler(commands='help')
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ Help."""
    await message.answer(text=HELP_COMMAND, parse_mode='HTML', reply_markup=kb)
    await message.delete()


@dp.message_handler(commands='links')
async def links_command(message: types.Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏."""
    await bot.send_message(chat_id=message.chat.id,
                           text='–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏',
                           reply_markup=ikb)
    await message.delete()


@dp.message_handler(Text(equals="–†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ–æ—Ç–∫–∞"))
async def open_kb_photo(message: types.Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ kb_photo."""
    await message.answer(text='–ß—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ–æ—Ç–∫—É –Ω–∞–∂–º–∏ –Ω–∞ "–†–∞–Ω–¥–æ–º"',
                         reply_markup=kb_photo)
    await message.delete()


@dp.message_handler(Text(equals="–†–∞–Ω–¥–æ–º"))
async def send_random_photo2(message: types.Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ü–∏—Ç—Ä—É—Å–∞."""
    await send_random(message)


@dp.message_handler(Text(equals="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def open_kb(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=kb)
    await message.delete()


@dp.message_handler(text='–ü–æ–∫–∞–∂–∏ –∫–æ—Ç–∞')
async def send_cat(message: types.Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞."""
    await message.answer("–°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –∫–æ—Ç")
    num = randrange(1, 4)
    if num == 1:
        await bot.send_photo(chat_id=message.chat.id, photo="https://avatars.dzeninfra.ru/get-zen_doc/5233619/pub_6236"
                                                            "38833c14f46c08058ef4_623638c0b4e657033dc6eb87/scale_1200")
    if num == 2:
        await bot.send_photo(chat_id=message.chat.id, photo="https://s13.stc.yc.kpcdn.net/sha"
                                                            "re/i/instagram/B44solahwlo/wr-1280.webp")
    if num == 3:
        await bot.send_photo(chat_id=message.chat.id, photo="https://wl-adme.cf.tsp.li/resize/728"
                                                            "x/jpg/a0a/9c6/6c8266551398ae6d3bf7200468.jpg")


@dp.message_handler(text='–ü–æ–∫–∞–∂–∏ –∞–±–µ–∑—è–Ω—É')
async def send_monkey(message: types.Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä —Å –æ–±–µ–∑—å—è–Ω–æ–π."""
    await message.answer("–°–º–æ—Ç—Ä–∏ –∫–∞–∫–∞—è –∞–±–µ–∑—è–Ω–∞")
    await bot.send_sticker(message.chat.id,
                           sticker="CAACAgIAAxkBAAEJ0W9kwQUDfsFmcCO_b2EAAUdqaJqoY7kAAssVAAJbUjhKdK-4j7qsbJgvBA")


@dp.message_handler(text='üêà‚Äç‚¨õ')
async def send_black_cat(message: types.Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä —Å —á–µ—Ä–Ω—ã–º –∫–æ—Ç–æ–º."""
    await bot.send_sticker(chat_id=message.chat.id,
                           sticker='CAACAgIAAxkBAAIB52TCwG1LjvcBOHkNenNyA1ekAg7TAALXFQACOeLQS57DiQEzhk9kLwQ')


@dp.message_handler(Text(equals="–ê–Ω–µ–∫–¥–æ—Ç—ã"))
async def send_new_jokes(message: types.Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã."""
    await get_jokes(message)


@dp.message_handler()
async def text_to_voice(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    tts = gTTS(message.text, lang='ru')
    tts.save(f'{message.from_user.id}.mp3')
    await message.answer_voice(open(f'{message.from_user.id}.mp3', 'rb'))


@dp.callback_query_handler()
async def photo_random_callback(callback: types.CallbackQuery):
    global random_photo
    if callback.data == 'dislike':
        await callback.answer(text="–¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å(")
    elif callback.data == 'like':
        await callback.answer(text="–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
    else:
        random_photo = random.choice(list(filter(lambda x: x != random_photo, list(photos.keys()))))
        await callback.message.edit_media(types.InputMedia(media=random_photo, type='photo',
                                                           caption=photos[random_photo]), reply_markup=ikb2)
        await callback.answer()


# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dispatcher=dp,
                           on_startup=on_startup,
                           skip_updates=True)
